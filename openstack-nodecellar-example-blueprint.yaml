tosca_definitions_version: cloudify_dsl_1_0

imports:
  - http://www.getcloudify.org/spec/cloudify/3.2m2/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.2m2/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.2m2/plugin.yaml
  - types/haproxy.yaml
  - types/nodecellar.yaml

inputs:

  agent_user:
    default: ''
  agent_public_key_name:
    type: string
  frontend_image_name:
    default: ''
  frontend_flavor_name:
    default: ''
  backend_image_name:
    default: ''
  backend_flavor_name:
    default: ''
  backend_app_port:
    default: 80
  backend_maxconn:
    default: 32

node_types:

  nodecellar.nodes.MonitoredServer:
    derived_from: cloudify.openstack.nodes.Server
    properties:
      cloudify_agent:
        default:
          user: { get_input: agent_user }
      server:
        default:
          image: { get_input: backend_image_name }
          flavor: { get_input: backend_flavor_name }
    interfaces:
      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                default:
                  interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                default:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}

node_templates:

  frontend_floatingip:
    type: cloudify.openstack.nodes.FloatingIP

  haproxy_frontend_host:
    type: cloudify.openstack.nodes.Server
    properties:
      cloudify_agent:
        user: { get_input: agent_user }
      server:
        image_name: { get_input: frontend_image_name }
        flavor_name: { get_input: frontend_flavor_name }
    relationships:
      - type: cloudify.openstack.server_connected_to_floating_ip
        target: frontend_floatingip
      - type: cloudify.openstack.server_connected_to_security_group
        target: haproxy_frontend_security_group

  haproxy_frontend_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      security_group:
        name: haproxy_frontend_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ http_in, port ] }

  http_in:
    type: haproxy.nodes.Proxy
    properties:
      default_backend: servers
      global_maxconn: 256
      mode: http
      port: 80
      timeout_connect: 5000
      timeout_client: 50000
      timeout_server: 50000
    relationships:
      - target: haproxy_frontend_host
        type: cloudify.relationships.contained_in
      - target: backend1
        type: node_connected_to_backend
      - target: backend2
        type: node_connected_to_backend

  nodecellar_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      security_group:
        name: nodecellar_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_input: backend_app_port }

  haproxy_backend_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      security_group:
        name: haproxy_nodecellar_example_backend_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_input: backend_app_port }

  nodejs_1:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_host_backend_1

  nodecellar_1:
    type: nodecellar.nodes.NodecellarApplicationModule
    properties:
      port: { get_input: backend_app_port }
    relationships:
      - type: node_connected_to_mongo
        target: mongod
      - type: node_contained_in_nodejs
        target: nodejs_1

  nodejs_host_backend_1:
    type: nodecellar.nodes.MonitoredServer
    relationships:
      - target: nodecellar_security_group
        type: cloudify.openstack.server_connected_to_security_group
      - target: haproxy_backend_security_group
        type: cloudify.openstack.server_connected_to_security_group

  backend1:
    type: haproxy.nodes.BackEnd
    properties:
      address: { get_attribute: [ nodejs_host_backend_1, ip ] }
      port: { get_input: backend_app_port }
      maxconn: { get_input: backend_maxconn }
    relationships:
      - target: nodejs_host_backend_1
        type: cloudify.relationships.contained_in
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: hello-world/scripts/configure.sh
        start: hello-world/scripts/start.sh
        stop: hello-world/scripts/stop.sh

  nodejs_2:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_host_backend_2

  nodecellar_2:
    type: nodecellar.nodes.NodecellarApplicationModule
    properties:
      port: { get_input: backend_app_port }
    relationships:
      - type: node_connected_to_mongo
        target: mongod
      - type: node_contained_in_nodejs
        target: nodejs_2

  nodejs_host_backend_2:
    type: nodecellar.nodes.MonitoredServer
    relationships:
      - target: nodecellar_security_group
        type: cloudify.openstack.server_connected_to_security_group
      - target: haproxy_backend_security_group
        type: cloudify.openstack.server_connected_to_security_group

  backend2:
    type: haproxy.nodes.BackEnd
    properties:
      address: { get_attribute: [ nodejs_host_backend_2, ip ] }
      port: { get_input: backend_app_port }
      maxconn: { get_input: backend_maxconn }
    relationships:
      - target: nodejs_host_backend_2
        type: cloudify.relationships.contained_in
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: hello-world/scripts/configure.sh
        start: hello-world/scripts/start.sh
        stop: hello-world/scripts/stop.sh

  mongod_host:
    type: nodecellar.nodes.MonitoredServer
    relationships:
      - type: cloudify.openstack.server_connected_to_security_group
        target: haproxy_backend_security_group
      - target: mongod_security_group
        type: cloudify.openstack.server_connected_to_security_group

  mongod:
    type: nodecellar.nodes.MongoDatabase
    properties:
      port: 27017
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/mongo/install-pymongo.sh
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                MongoDBCollector:
                  config:
                    hosts: "localhost:27017"
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_host

  mongod_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      security_group:
        name: mongod_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ mongod, port ] }
        - remote_ip_prefix: 0.0.0.0/0
          port: 28017

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ frontend_floatingip, floating_ip_address ] }
      port: { get_input: backend_app_port }
